#+title: Khanacademy excersise status
#+author: Thomas Rometsch

This is a tool to automatically extract the status of exercises for a list of students from the online learning platform [[https://khanacademy.org]].
The code is released under MIT license.

* Changelog

** v0.2

+ FIX: request information on exercises individually if they don't appear in the =/api/v1/user/exercises= request, since this is incomplete for some students. Unfortunately this increases the runtime.
+ add python2 support
+ sort student names alphabetically in output
+ add option to dump all json responses to a directory (--dump)
+ add short versions of command line arguments

** v0.1

+ initial release

* Register a Khan App

You'll need to register an app on Khan Academy in order to be able to authenticate your request and to see your students data.
To register an app simply follow [[https://www.khanacademy.org/api-apps/register]] and note your keys.
Keep them safe and secret as they provide access to your account via the API.

* Description

Provided with a suitable list of students and a list of exercise names, the program uses the kahnacademy API to retrieve the learning status.
An exercise with the status =practiced= is awarded with 1 point and an exercise with status =mastered= is awarded with 2 points.
This simply reflects the needs of my teaching and can easily be changed in the code.

Finally, the code outputs a formatted table of the results with tab separated values including the name and an id of the student, the total number of points and the points for each exercise.
The name of the exercises are printed in the header for reference.

An output with a list of students including only myself might be:

#+BEGIN_EXAMPLE
# 1	Powers of the imaginary unit
# 2	Plot numbers on the complex plane
# 3	Add & subtract complex numbers
# 4	Graphically add & subtract complex numbers
# 5	Multiply complex numbers
# Student Name	student id	tot	1	2	3	4	5
Thomas Rometsch	012345678   4	1	1	1	0	1
#+END_EXAMPLE

Since the values simply a tab separated file, the result can easily be parsed or imported in a spreadsheet program.

* How To

Short version:

1) Have =python=, install package =rauth=, e.g. via =pip install --user rauth=
2) go to [[https://www.khanacademy.org/api-apps/register]] to get a key and save the keys to a text file containing the consumer key in the first line and the consumer secret in the second line.
3) Run =python khan-exstat.py --help= to figure out how it works. (hint: =--save-students= or =--print-students= will be helpful)

This section describes the full process of how to use the program =khan-exstat= from installation over preparing the input files to calling the program.
It is intended to be a very detailed guide and I try to cover as much as possible.

1) Start by installing =Python= if you have not already done it. 
   We need it to run the code.
   Install it via the package manager of your choice or download it on the [[https://www.python.org/downloads/release/python-371/][official webpage]] or somewhere else.
2) Once you have =Python=, we need to install the package =rauth= to handle the authentication with Khanacademy.
   Install it with the python package manager of your choice.
   I use the package manager =pip=.
   You can get it from their homepage [[https://pypi.org/project/pip/][pypi.org]] or probably via your systems package manager (on linux).
3) Now download to the code from this repository. Either as a [[https://github.com/rometsch/khan-exstat/archive/master.zip][zip file]] or using git by running =git clone https://github.com/rometsch/khan-exstat.git= inside a terminal.
4) Change to the directory where you downloaded the code to and unzip it if necessary.
5) Run =python khan-exstat.py --help= to see whether all dependencies are met. You should see the help message detailing the command line arguments.
6) Now we need to get API Keys for Khanacademy.
   Unfortunately, I can't simply provide my own app keys, because you can only get information about students who have the account as coach, who applied for the app keys.
   This is to protect students data (see the [[https://github.com/Khan/khan-api/wiki/Khan-Academy-API-Authentication][khan-api wiki]] for details).
   Go to [[https://www.khanacademy.org/api-apps/register]] and fill out the required information.
   Save the keys to a text file, e.g. =keys.txt= with the first line being the =consumer key= and the second line being the =consumer secret=.
   This should then look like
   #+BEGIN_EXAMPLE
   BEt1i4gVCP3wen5
   XA93oqeHruZY5R9
   #+END_EXAMPLE
7) Let's check whether all works and get a list of all our students at the same time.
   We pass the =key.txt= file to the script in order for it to know which keys to use.
   In your terminal, run
   #+BEGIN_EXAMPLE
   python khan-exstat.py --keys keys.txt --save-students all_students.txt
   #+END_EXAMPLE
   We called the program with the =--save-students= with the arguments =all_students.txt=.
   This save a list of all your students into the file =all_students.txt= in your current working directory.
   After running the command, the Khanacademy webpage should pop up, asking you first to log-in and then to verify the api usage we just requested by running the script.
   Click =confirm=.
8) There should now be a list of student names in the first column of =all_students.txt=, separated from a list of the respective Khanacademy ids in the second column, separated by a tab character.
   To make a list of students for which you want to retrieve the progress, delete all other lines from this file and save it under a new name, e.g. =my_math_class.txt=.
9) We want to get the status for specific exercises on Khanacademy, so we need to provide the names of them.
   Make a text file, e.g. =assignment1.txt= which has the name of one exercise in each line.
   Have a look at the =samples= folder for examples.
   (If you're a college of mine, the =assignment{}.txt= file reflect our current assignment ;))
   For the time being, just copy =assigment1.txt= from the =samples= folder.
10) Now we have everything in place to retrieve the information we want.
    In your terminal, run
    #+BEGIN_EXAMPLE
    python khan-exstat.py --keys keys.txt --students my_math_class.txt --exercises assigment1.txt
    #+END_EXAMPLE
    You have to, once again, confirm the request in your browser.
    The result should be a table, with the exercises printed in the header, the names of the students, (if you specified it, see below) an id, the total number of points and the points earned for each of the exercises.
    Note that =1= point indicate an exercise with the status =practiced= while =2= points indicate the status =mastered=.

* Dependencies

The tool is written for =python= (version 2 or 3) and depends on the package =rauth=.
You can install it e.g. via =pip install --user rauth=.

* Command line arguments

A call of the program with all necessary arguments is:

#+BEGIN_EXAMPLE
python khan-exstat.py --keys keys.txt --students students.txt --exercises exercises.txt
#+END_EXAMPLE

** --print-students

Print a list of all students that have you as their coach.
The format is the same as needed later for the students file, i.e. the name in the first column and the Khan =user_id= provided by the API in the second column separated by a tab.

An example with myself as the only student is

#+BEGIN_EXAMPLE
Thomas Rometsch	http://id.khanacademy.org/my-numeric-id
#+END_EXAMPLE

Use this to create a list of students for your class.
Save the output to a file and delete the unneeded rows.

** --students FILENAME

Specify the file with the list of students.
The file needs to have the following syntax:

#+BEGIN_EXAMPLE
name <tab> user_id <tab> student_id
#+END_EXAMPLE

The first two columns can be produced with the =--print-students= option.
The third column is optional and is meant to be the unique student id used by your institution.

** --exercises FILENAME

Specify the file containing the names of exercises.
Just list all exercise names as they appear in the title on kahnacademy.org, each in a new row.

** --keys FILENAME

A text file containing your =Consumer Key= in the first line and your =Consumer Secret= in the second line.

* Credits

This script is based on the example code =test_client2= from the [[https://github.com/Khan/khan-api][Kahn Api Repository]] which was released under MIT license.
